{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/timurmarokko/Desktop/dev/react-mesto-auth/src/components/Login.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport InfoToolTip from \"./InfoTooltip\";\n\nfunction Login(props) {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [isLoginPopup, setIsLoginPopup] = useState(false);\n  const [submitStatus, setSubmitStatus] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    if (props.loggedIn) history.push(\"/\");\n  }, [props.loggedIn, history]);\n\n  function onChangeEmail(e) {\n    setEmail(e.target.value);\n  }\n\n  function onChangePassword(e) {\n    setPassword(e.target.value);\n  }\n\n  function onClose() {\n    setIsLoginPopup(false);\n\n    if (submitStatus) {\n      props.checkToken();\n    }\n  }\n\n  function onSubmit(e) {\n    e.preventDefault();\n    props.onLogin(email, password).then(() => {\n      setSubmitStatus(true);\n      setPopupMessage(\"Вы успешно вошли!\");\n    }).catch(e => {\n      console.error(e.message);\n\n      switch (e.message) {\n        case \"Incorrect email address or password\":\n          setPopupMessage(\"Некорректный email или пароль\");\n          break;\n\n        case 'Поле \"password\" должно быть заполнено':\n          setPopupMessage('Поле \"Пароль\" должны быть заполенено');\n          break;\n\n        default:\n          setPopupMessage(\"Что-то пошло не так! Попробуйте ещё раз.\");\n      }\n    }).finally(() => {\n      setIsLoginPopup(true);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"register\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"register__title\",\n        children: \"\\u0412\\u0445\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        className: \"register__email\",\n        placeholder: \"Email\",\n        value: data.email,\n        onChange: onChangeEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        className: \"register__password\",\n        placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n        value: data.password,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"register__submit\",\n        children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfoToolTip, {\n      isOpen: isLoginPopup,\n      onClose: onClose,\n      name: \"login\",\n      status: submitStatus,\n      children: popupMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Login, \"JOE8iPc2uN5D/ExNpXu1oJwb/yQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/timurmarokko/Desktop/dev/react-mesto-auth/src/components/Login.js"],"names":["useState","useEffect","useHistory","InfoToolTip","Login","props","email","setEmail","password","setPassword","popupMessage","setPopupMessage","isLoginPopup","setIsLoginPopup","submitStatus","setSubmitStatus","history","loggedIn","push","onChangeEmail","e","target","value","onChangePassword","onClose","checkToken","onSubmit","preventDefault","onLogin","then","catch","console","error","message","finally","data","handleChange"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport InfoToolTip from \"./InfoTooltip\";\n\nfunction Login(props) {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [popupMessage, setPopupMessage] = useState(\"\");\n    const [isLoginPopup, setIsLoginPopup] = useState(false);\n    const [submitStatus, setSubmitStatus] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (props.loggedIn) history.push(\"/\");\n    }, [props.loggedIn, history]);\n\n    function onChangeEmail(e) {\n        setEmail(e.target.value);\n    }\n\n    function onChangePassword(e) {\n        setPassword(e.target.value);\n    }\n\n    function onClose() {\n        setIsLoginPopup(false);\n        if (submitStatus) {\n            props.checkToken();\n        }\n    }\n\n    function onSubmit(e) {\n        e.preventDefault();\n        props\n            .onLogin(email, password)\n            .then(() => {\n                setSubmitStatus(true);\n                setPopupMessage(\"Вы успешно вошли!\");\n            })\n            .catch((e) => {\n                console.error(e.message);\n                switch (e.message) {\n                    case \"Incorrect email address or password\":\n                        setPopupMessage(\"Некорректный email или пароль\");\n                        break;\n                    case 'Поле \"password\" должно быть заполнено':\n                        setPopupMessage('Поле \"Пароль\" должны быть заполенено');\n                        break;\n                    default:\n                        setPopupMessage(\n                            \"Что-то пошло не так! Попробуйте ещё раз.\"\n                        );\n                }\n            })\n            .finally(() => {\n                setIsLoginPopup(true);\n            });\n    }\n\n    return (\n        <>\n            <form className=\"register\" onSubmit={onSubmit}>\n                <h1 className=\"register__title\">Вход</h1>\n                <input\n                    type=\"email\"\n                    className=\"register__email\"\n                    placeholder=\"Email\"\n                    value={data.email}\n                    onChange={onChangeEmail}\n                />\n                <input\n                    type=\"password\"\n                    className=\"register__password\"\n                    placeholder=\"Пароль\"\n                    value={data.password}\n                    onChange={handleChange}\n                />\n                <button className=\"register__submit\">Войти</button>\n            </form>\n            <InfoToolTip\n                isOpen={isLoginPopup}\n                onClose={onClose}\n                name=\"login\"\n                status={submitStatus}\n            >\n                {popupMessage}\n            </InfoToolTip>\n        </>\n    );\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}