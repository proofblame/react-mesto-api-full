{"ast":null,"code":"import _classCallCheck from\"/Users/timurmarokko/Desktop/dev/mesto-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/timurmarokko/Desktop/dev/mesto-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Api=/*#__PURE__*/function(){function Api(_ref){var baseUrl=_ref.baseUrl,headers=_ref.headers;_classCallCheck(this,Api);this._url=baseUrl;this._headers=headers;}// Получить начальные карточки\n_createClass(Api,[{key:\"getInitialCards\",value:function getInitialCards(){var _this=this;return fetch(\"\".concat(this._url,\"/cards\"),{method:\"GET\",headers:this._headers}).then(function(res){return _this._addResult(res);});}// Добавить новую карточку\n},{key:\"addNewCard\",value:function addNewCard(name,link){var _this2=this;return fetch(\"\".concat(this._url,\"/cards\"),{method:\"POST\",headers:this._headers,body:JSON.stringify({name:name,link:link})}).then(function(res){return _this2._addResult(res);});}// Обновляем статус лайков карточки\n},{key:\"changeLikeCardStatus\",value:function changeLikeCardStatus(cardId,noIsLiked){var _this3=this;if(noIsLiked){return fetch(\"\".concat(this._url,\"/cards/likes/\").concat(cardId),{method:\"PUT\",headers:this._headers}).then(function(res){return _this3._addResult(res);});}else{return fetch(\"\".concat(this._url,\"/cards/likes/\").concat(cardId),{method:\"DELETE\",headers:this._headers}).then(function(res){return _this3._addResult(res);});}}// Удаление карточки\n},{key:\"deleteCard\",value:function deleteCard(cardId){var _this4=this;return fetch(\"\".concat(this._url,\"/cards/\").concat(cardId),{method:\"DELETE\",headers:this._headers}).then(function(res){return _this4._addResult(res);});}// Получить данные пользователя\n},{key:\"getUserInfo\",value:function getUserInfo(){var _this5=this;return fetch(\"\".concat(this._url,\"/users/me\"),{method:\"GET\",headers:this._headers}).then(function(res){return _this5._addResult(res);});}// Редактирование данных пользователя\n},{key:\"setUserInfo\",value:function setUserInfo(name,about){var _this6=this;return fetch(\"\".concat(this._url,\"/users/me\"),{method:\"PATCH\",headers:this._headers,body:JSON.stringify({name:name,about:about})}).then(function(res){return _this6._addResult(res);});}// Редактирование аватара пользователя\n},{key:\"setUserAvatar\",value:function setUserAvatar(url){var _this7=this;return fetch(\"\".concat(this._url,\"/users/me/avatar\"),{method:\"PATCH\",headers:this._headers,body:JSON.stringify({avatar:url})}).then(function(res){return _this7._addResult(res);});}},{key:\"_addResult\",value:function _addResult(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));}}]);return Api;}();// Получение данных с сервера\nvar api=new Api({baseUrl:\"https://mesto.nomoreparties.co/v1/cohort-18\",headers:{authorization:\"45380a0b-d1c3-4f21-8b0c-7fe08b9cb145\",\"Content-Type\":\"application/json\"}});export default api;","map":{"version":3,"sources":["/Users/timurmarokko/Desktop/dev/mesto-react/src/utils/api.js"],"names":["Api","baseUrl","headers","_url","_headers","fetch","method","then","res","_addResult","name","link","body","JSON","stringify","cardId","noIsLiked","about","url","avatar","ok","json","Promise","reject","status","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor({ baseUrl, headers }) {\n        this._url = baseUrl;\n        this._headers = headers;\n    }\n    // Получить начальные карточки\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            method: \"GET\",\n            headers: this._headers,\n        }).then((res) => this._addResult(res));\n    }\n    // Добавить новую карточку\n    addNewCard(name, link) {\n        return fetch(`${this._url}/cards`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                link: link,\n            }),\n        }).then((res) => this._addResult(res));\n    }\n\n    // Обновляем статус лайков карточки\n    changeLikeCardStatus(cardId, noIsLiked) {\n        if (noIsLiked) {\n            return fetch(`${this._url}/cards/likes/${cardId}`, {\n                method: \"PUT\",\n                headers: this._headers,\n            }).then((res) => this._addResult(res));\n        } else {\n            return fetch(`${this._url}/cards/likes/${cardId}`, {\n                method: \"DELETE\",\n                headers: this._headers,\n            }).then((res) => this._addResult(res));\n        }\n    }\n\n    // Удаление карточки\n    deleteCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`, {\n            method: \"DELETE\",\n            headers: this._headers,\n        }).then((res) => this._addResult(res));\n    }\n    // Получить данные пользователя\n    getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            method: \"GET\",\n            headers: this._headers,\n        }).then((res) => this._addResult(res));\n    }\n    // Редактирование данных пользователя\n    setUserInfo(name, about) {\n        return fetch(`${this._url}/users/me`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                about: about,\n            }),\n        }).then((res) => this._addResult(res));\n    }\n    // Редактирование аватара пользователя\n    setUserAvatar(url) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: url,\n            }),\n        }).then((res) => this._addResult(res));\n    }\n    _addResult(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n}\n\n// Получение данных с сервера\nconst api = new Api({\n    baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-18\",\n    headers: {\n        authorization: \"45380a0b-d1c3-4f21-8b0c-7fe08b9cb145\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}