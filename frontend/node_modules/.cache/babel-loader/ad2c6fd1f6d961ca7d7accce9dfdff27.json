{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._url = baseUrl;\n    this._headers = headers;\n  } // Получить начальные карточки\n\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => this._addResult(res));\n  } // Добавить новую карточку\n\n\n  addNewCard(name, link) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => this._addResult(res));\n  } // Обновляем статус лайков карточки\n\n\n  changeLikeCardStatus(cardId, noIsLiked) {\n    if (noIsLiked) {\n      return fetch(`${this._url}/cards/likes/${cardId}`, {\n        method: \"PUT\",\n        headers: this._headers\n      }).then(res => this._addResult(res));\n    } else {\n      return fetch(`${this._url}/cards/likes/${cardId}`, {\n        method: \"DELETE\",\n        headers: this._headers\n      }).then(res => this._addResult(res));\n    }\n  } // Удаление карточки\n\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._addResult(res));\n  } // Получить данные пользователя\n\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => this._addResult(res));\n  } // Редактирование данных пользователя\n\n\n  setUserInfo(name, about) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: job\n      })\n    }).then(res => this._addResult(res));\n  } // Редактирование аватара пользователя\n\n\n  editUserAvatar(url) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: url\n      })\n    }).then(res => this._addResult(res));\n  }\n\n  _addResult(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n} // Получение данных с сервера\n\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-18\",\n  headers: {\n    authorization: \"45380a0b-d1c3-4f21-8b0c-7fe08b9cb145\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/timurmarokko/Desktop/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","baseUrl","headers","_url","_headers","getInitialCards","fetch","method","then","res","_addResult","addNewCard","name","link","body","JSON","stringify","changeLikeCardStatus","cardId","noIsLiked","deleteCard","getUserInfo","setUserInfo","about","job","editUserAvatar","url","avatar","ok","json","Promise","reject","status","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor({ baseUrl, headers }) {\n        this._url = baseUrl;\n        this._headers = headers;\n    }\n    // Получить начальные карточки\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            method: \"GET\",\n            headers: this._headers,\n        }).then((res) => this._addResult(res));\n    }\n    // Добавить новую карточку\n    addNewCard(name, link) {\n        return fetch(`${this._url}/cards`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                link: link,\n            }),\n        }).then((res) => this._addResult(res));\n    }\n\n    // Обновляем статус лайков карточки\n    changeLikeCardStatus(cardId, noIsLiked) {\n        if (noIsLiked) {\n            return fetch(`${this._url}/cards/likes/${cardId}`, {\n                method: \"PUT\",\n                headers: this._headers,\n            }).then((res) => this._addResult(res));\n        } else {\n            return fetch(`${this._url}/cards/likes/${cardId}`, {\n                method: \"DELETE\",\n                headers: this._headers,\n            }).then((res) => this._addResult(res));\n        }\n    }\n\n    // Удаление карточки\n    deleteCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`, {\n            method: \"DELETE\",\n            headers: this._headers,\n        }).then((res) => this._addResult(res));\n    }\n    // Получить данные пользователя\n    getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            method: \"GET\",\n            headers: this._headers,\n        }).then((res) => this._addResult(res));\n    }\n    // Редактирование данных пользователя\n    setUserInfo(name, about) {\n        return fetch(`${this._url}/users/me`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                about: job,\n            }),\n        }).then((res) => this._addResult(res));\n    }\n    // Редактирование аватара пользователя\n    editUserAvatar(url) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: url,\n            }),\n        }).then((res) => this._addResult(res));\n    }\n    _addResult(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n}\n\n// Получение данных с сервера\nconst api = new Api({\n    baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-18\",\n    headers: {\n        authorization: \"45380a0b-d1c3-4f21-8b0c-7fe08b9cb145\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}